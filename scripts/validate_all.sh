#!/bin/bash

# PivotPHP v1.0.0 - Validador Principal do Projeto
# Executa todos os scripts de valida√ß√£o em sequ√™ncia

# Parse argumentos
PRE_COMMIT_MODE=false
if [[ "$1" == "--pre-commit" ]]; then
    PRE_COMMIT_MODE=true
    echo "üîç PivotPHP v1.0.0 - Valida√ß√£o Pre-commit"
    echo "============================================="
else
    echo "üöÄ PivotPHP v1.0.0 - Valida√ß√£o Completa do Projeto"
    echo "======================================================="
fi
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

# Contadores de resultados
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Fun√ß√£o para executar script e capturar resultado
run_validation() {
    local script="$1"
    local description="$2"

    echo ""
    print_status "Executando: $description"
    echo "----------------------------------------"

    ((TOTAL_TESTS++))

    if [ -f "$script" ] && [ -x "$script" ]; then
        if $script; then
            print_success "$description - PASSOU"
            ((PASSED_TESTS++))
            return 0
        else
            print_error "$description - FALHOU"
            ((FAILED_TESTS++))
            return 1
        fi
    else
        print_error "Script n√£o encontrado ou n√£o execut√°vel: $script"
        ((FAILED_TESTS++))
        return 1
    fi
}

# Definir ordem dos testes baseado no modo
if [ "$PRE_COMMIT_MODE" = true ]; then
    print_status "Iniciando valida√ß√£o pre-commit (essencial apenas)..."
    echo ""

    # Para pre-commit, executamos apenas valida√ß√µes cr√≠ticas
    # 1. Valida√ß√£o PSR-12 (cr√≠tica para qualidade de c√≥digo)
    if [ -f "./scripts/validate-psr12.php" ]; then
        print_status "Executando: Valida√ß√£o PSR-12"
        echo "----------------------------------------"
        ((TOTAL_TESTS++))

        if php ./scripts/validate-psr12.php; then
            print_success "Valida√ß√£o PSR-12 - PASSOU"
            ((PASSED_TESTS++))
        else
            print_error "Valida√ß√£o PSR-12 - FALHOU (c√≥digo n√£o conforme)"
            ((FAILED_TESTS++))
        fi
    fi

    # 2. Verificar sintaxe PHP de arquivos staged
    print_status "Executando: Verifica√ß√£o de Sintaxe PHP"
    echo "----------------------------------------"
    ((TOTAL_TESTS++))

    STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(php)$' || true)
    SYNTAX_OK=true

    if [ -n "$STAGED_FILES" ]; then
        for FILE in $STAGED_FILES; do
            if [ -f "$FILE" ]; then
                if ! php -l "$FILE" > /dev/null 2>&1; then
                    print_error "Erro de sintaxe em: $FILE"
                    SYNTAX_OK=false
                fi
            fi
        done
    fi

    if [ "$SYNTAX_OK" = true ]; then
        print_success "Verifica√ß√£o de Sintaxe PHP - PASSOU"
        ((PASSED_TESTS++))
    else
        print_error "Verifica√ß√£o de Sintaxe PHP - FALHOU"
        ((FAILED_TESTS++))
    fi

    # 3. Verifica√ß√£o b√°sica de estrutura (r√°pida)
    print_status "Executando: Verifica√ß√£o B√°sica de Estrutura"
    echo "----------------------------------------"
    ((TOTAL_TESTS++))

    if [ -f "composer.json" ] && [ -d "src" ] && [ -f "README.md" ]; then
        print_success "Verifica√ß√£o B√°sica de Estrutura - PASSOU"
        ((PASSED_TESTS++))
    else
        print_error "Verifica√ß√£o B√°sica de Estrutura - FALHOU"
        ((FAILED_TESTS++))
    fi

else
    print_status "Iniciando valida√ß√£o completa do projeto PivotPHP v1.0.0..."
    echo ""

    # 1. Valida√ß√£o da estrutura de documenta√ß√£o
    run_validation "./scripts/validate-docs.sh" "Valida√ß√£o da Estrutura de Documenta√ß√£o"

    # 2. Valida√ß√£o dos benchmarks
    run_validation "./scripts/validate_benchmarks.sh" "Valida√ß√£o dos Benchmarks"

    # 3. Valida√ß√£o completa do projeto (PHP)
    print_status "Executando: Valida√ß√£o Completa do Projeto (PHP)"
    echo "----------------------------------------"
    ((TOTAL_TESTS++))

    if [ -f "./scripts/validate_project.php" ]; then
        if php ./scripts/validate_project.php; then
            print_success "Valida√ß√£o Completa do Projeto (PHP) - PASSOU"
            ((PASSED_TESTS++))
        else
            print_error "Valida√ß√£o Completa do Projeto (PHP) - FALHOU"
            ((FAILED_TESTS++))
        fi
    else
        print_error "Script n√£o encontrado: ./scripts/validate_project.php"
        ((FAILED_TESTS++))
    fi

    # 4. Valida√ß√£o PSR-12 (se dispon√≠vel)
    if [ -f "./scripts/validate-psr12.php" ]; then
        print_status "Executando: Valida√ß√£o PSR-12"
        echo "----------------------------------------"
        ((TOTAL_TESTS++))

        if php ./scripts/validate-psr12.php; then
            print_success "Valida√ß√£o PSR-12 - PASSOU"
            ((PASSED_TESTS++))
        else
            print_warning "Valida√ß√£o PSR-12 - Avisos encontrados (n√£o cr√≠tico)"
            ((PASSED_TESTS++))  # PSR-12 warnings n√£o s√£o cr√≠ticos
        fi
    fi
fi

# Relat√≥rio final
echo ""
echo "=========================================="
if [ "$PRE_COMMIT_MODE" = true ]; then
    echo "üìä RELAT√ìRIO PRE-COMMIT v1.0.0"
else
    echo "üìä RELAT√ìRIO FINAL DE VALIDA√á√ÉO v1.0.0"
fi
echo "=========================================="
echo ""

# Calcular percentual de sucesso
if [ $TOTAL_TESTS -gt 0 ]; then
    SUCCESS_RATE=$((PASSED_TESTS * 100 / TOTAL_TESTS))
else
    SUCCESS_RATE=0
fi

echo "üìà Estat√≠sticas:"
echo "  Total de valida√ß√µes: $TOTAL_TESTS"
echo "  Valida√ß√µes passaram: $PASSED_TESTS"
echo "  Valida√ß√µes falharam: $FAILED_TESTS"
echo "  Taxa de sucesso: $SUCCESS_RATE%"
echo ""

if [ $FAILED_TESTS -eq 0 ]; then
    print_success "üéâ TODAS AS VALIDA√á√ïES PASSARAM!"
    echo ""

    if [ "$PRE_COMMIT_MODE" = true ]; then
        echo "‚úÖ Commit autorizado! O c√≥digo atende aos padr√µes de qualidade."
        echo ""
        echo "üìù Valida√ß√µes executadas:"
        echo "   ‚Ä¢ Conformidade PSR-12"
        echo "   ‚Ä¢ Sintaxe PHP"
        echo "   ‚Ä¢ Estrutura b√°sica do projeto"
    else
        echo "‚úÖ O projeto PivotPHP v1.0.0 est√° pronto para:"
        echo "   ‚Ä¢ Execu√ß√£o em produ√ß√£o"
        echo "   ‚Ä¢ Publica√ß√£o no Packagist"
        echo "   ‚Ä¢ Distribui√ß√£o para desenvolvedores"
        echo "   ‚Ä¢ Cria√ß√£o de release oficial"
        echo ""
        echo "üöÄ Pr√≥ximos passos recomendados:"
        echo "   1. Execute benchmarks finais: ./benchmarks/run_benchmark.sh -f"
        echo "   2. Execute testes unit√°rios: composer test"
        echo "   3. Crie tag de release: git tag -a v1.0.0 -m 'Release v1.0.0'"
        echo "   4. Publique: git push origin main --tags"
    fi

    exit 0

elif [ $SUCCESS_RATE -ge 80 ]; then
    if [ "$PRE_COMMIT_MODE" = true ]; then
        print_error "‚ùå COMMIT REJEITADO - Corre√ß√µes necess√°rias ($SUCCESS_RATE%)"
        echo ""
        echo "üö® Algumas valida√ß√µes cr√≠ticas falharam."
        echo "   Corrija os problemas reportados antes de tentar novamente."
        echo ""
        echo "üí° Dica: Execute 'scripts/validate_all.sh' sem --pre-commit para valida√ß√£o completa"
    else
        print_warning "‚ö†Ô∏è MAIORIA DAS VALIDA√á√ïES PASSOU ($SUCCESS_RATE%)"
        echo ""
        echo "‚úÖ O projeto est√° em bom estado, mas algumas valida√ß√µes falharam."
        echo "   Revise os erros acima e corrija conforme necess√°rio."
        echo ""
        echo "üîß A√ß√µes recomendadas:"
        echo "   ‚Ä¢ Revise e corrija os erros reportados"
        echo "   ‚Ä¢ Execute valida√ß√µes individuais para mais detalhes"
        echo "   ‚Ä¢ Execute novamente ap√≥s corre√ß√µes"
    fi

    exit 1

else
    if [ "$PRE_COMMIT_MODE" = true ]; then
        print_error "‚ùå COMMIT REJEITADO - Muitos problemas encontrados ($SUCCESS_RATE%)"
        echo ""
        echo "üö® O c√≥digo n√£o atende aos padr√µes m√≠nimos de qualidade."
        echo "   Corrija todos os problemas reportados antes de tentar novamente."
    else
        print_error "‚ùå MUITAS VALIDA√á√ïES FALHARAM ($SUCCESS_RATE%)"
        echo ""
        echo "üö® O projeto precisa de corre√ß√µes significativas antes de ser considerado est√°vel."
        echo ""
        echo "üîß A√ß√µes necess√°rias:"
        echo "   ‚Ä¢ Corrija todos os erros cr√≠ticos reportados"
        echo "   ‚Ä¢ Verifique a estrutura do projeto"
        echo "   ‚Ä¢ Execute ./scripts/validate-docs.sh individualmente"
        echo "   ‚Ä¢ Execute ./scripts/validate_project.php individualmente"
        echo "   ‚Ä¢ Execute valida√ß√µes individuais para detalhes espec√≠ficos"
    fi

    exit 1
fi
