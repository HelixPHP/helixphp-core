#!/bin/bash

# HelixPHP v1.0.0 - Validador de Benchmarks
# Verifica se os benchmarks est√£o atualizados e funcionando

echo "üèÉ‚Äç‚ôÇÔ∏è Validando benchmarks do HelixPHP v1.0.0..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

# Contadores
ERRORS=0
WARNINGS=0

print_status "Verificando estrutura de benchmarks..."

# Diret√≥rios obrigat√≥rios
if [ -d "benchmarks" ]; then
    print_success "Diret√≥rio benchmarks/ existe"
else
    print_error "Diret√≥rio benchmarks/ n√£o encontrado"
    ((ERRORS++))
fi

if [ -d "benchmarks/reports" ]; then
    print_success "Diret√≥rio benchmarks/reports/ existe"
else
    print_error "Diret√≥rio benchmarks/reports/ n√£o encontrado"
    ((ERRORS++))
fi

print_status "Verificando scripts de benchmark..."

# Scripts essenciais
BENCHMARK_SCRIPTS=(
    "benchmarks/run_benchmark.sh"
    "benchmarks/ExpressPhpBenchmark.php"
    "benchmarks/ComprehensivePerformanceAnalysis.php"
    "benchmarks/EnhancedAdvancedOptimizationsBenchmark.php"
    "benchmarks/generate_comprehensive_report.php"
)

for script in "${BENCHMARK_SCRIPTS[@]}"; do
    if [ -f "$script" ]; then
        if [ -x "$script" ]; then
            print_success "Script $script existe e √© execut√°vel"
        else
            print_warning "Script $script existe mas n√£o √© execut√°vel"
            ((WARNINGS++))
        fi
    else
        print_error "Script $script n√£o encontrado"
        ((ERRORS++))
    fi
done

print_status "Verificando documenta√ß√£o de benchmarks..."

# Documenta√ß√£o
if [ -f "docs/performance/benchmarks/README.md" ]; then
    size=$(wc -c < "docs/performance/benchmarks/README.md")
    if [ "$size" -gt 5000 ]; then
        print_success "docs/performance/benchmarks/README.md existe e tem conte√∫do adequado ($size bytes)"

        # Verificar se cont√©m dados v1.0.0
        if grep -q "02/07/2025" "docs/performance/benchmarks/README.md" && \
           grep -q "2.69M" "docs/performance/benchmarks/README.md" && \
           grep -q "PHP 8.4.8" "docs/performance/benchmarks/README.md"; then
            print_success "Documenta√ß√£o cont√©m dados atualizados v1.0.0"
        else
            print_warning "Documenta√ß√£o pode n√£o estar atualizada para v1.0.0"
            ((WARNINGS++))
        fi
    else
        print_warning "docs/performance/benchmarks/README.md tem pouco conte√∫do ($size bytes)"
        ((WARNINGS++))
    fi
else
    print_error "docs/performance/benchmarks/README.md n√£o encontrado"
    ((ERRORS++))
fi

print_status "Verificando relat√≥rios de benchmark recentes..."

# Verificar se existem relat√≥rios recentes
RECENT_REPORTS=$(find benchmarks/reports -name "*.json" -mtime -1 2>/dev/null | wc -l)
if [ "$RECENT_REPORTS" -gt 0 ]; then
    print_success "$RECENT_REPORTS relat√≥rio(s) de benchmark encontrado(s) nas √∫ltimas 24h"
else
    print_warning "Nenhum relat√≥rio de benchmark recente encontrado"
    ((WARNINGS++))
fi

# Verificar relat√≥rios v1.0.0 espec√≠ficos
V212_REPORTS=$(find benchmarks/reports -name "*2025-07-02*" 2>/dev/null | wc -l)
if [ "$V212_REPORTS" -gt 0 ]; then
    print_success "$V212_REPORTS relat√≥rio(s) v1.0.0 encontrado(s)"
else
    print_warning "Nenhum relat√≥rio espec√≠fico v1.0.0 encontrado"
    ((WARNINGS++))
fi

print_status "Testando execu√ß√£o r√°pida de benchmark..."

# Testar se o benchmark roda
if [ -x "benchmarks/run_benchmark.sh" ]; then
    echo "Executando teste r√°pido de benchmark..."
    if timeout 30s ./benchmarks/run_benchmark.sh -q > /dev/null 2>&1; then
        print_success "Benchmark r√°pido executado com sucesso"
    else
        print_warning "Benchmark r√°pido falhou ou demorou muito (timeout 30s)"
        ((WARNINGS++))
    fi
else
    print_error "Script de benchmark n√£o √© execut√°vel"
    ((ERRORS++))
fi

print_status "Verificando configura√ß√£o de performance..."

# Verificar PHP
PHP_VERSION=$(php -v | head -n1 | grep -o 'PHP [0-9]\+\.[0-9]\+\.[0-9]\+' || echo "PHP n√£o encontrado")
if [[ "$PHP_VERSION" == *"8.4"* ]]; then
    print_success "PHP 8.4.x detectado: $PHP_VERSION"
else
    print_warning "PHP 8.4.x recomendado para v1.0.0, detectado: $PHP_VERSION"
    ((WARNINGS++))
fi

# Verificar OPcache
OPCACHE_STATUS=$(php -m | grep -i opcache || echo "")
if [ -n "$OPCACHE_STATUS" ]; then
    print_success "OPcache est√° dispon√≠vel"
else
    print_warning "OPcache n√£o detectado (recomendado para performance)"
    ((WARNINGS++))
fi

# Verificar Composer
if [ -f "vendor/autoload.php" ]; then
    print_success "Autoload do Composer dispon√≠vel"
else
    print_error "vendor/autoload.php n√£o encontrado - execute 'composer install'"
    ((ERRORS++))
fi

echo ""
print_status "Relat√≥rio final de valida√ß√£o de benchmarks:"

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    print_success "‚úÖ Todos os benchmarks est√£o configurados corretamente!"
    exit 0
elif [ $ERRORS -eq 0 ]; then
    print_warning "‚ö†Ô∏è Benchmarks OK, mas $WARNINGS aviso(s) encontrado(s)"
    exit 0
else
    print_error "‚ùå $ERRORS erro(s) e $WARNINGS aviso(s) encontrado(s)"
    echo ""
    echo "Para corrigir os problemas:"
    echo "1. Execute 'composer install' se necess√°rio"
    echo "2. Verifique se os scripts t√™m permiss√£o de execu√ß√£o: chmod +x benchmarks/*.sh"
    echo "3. Execute um benchmark teste: ./benchmarks/run_benchmark.sh -q"
    echo "4. Atualize a documenta√ß√£o se necess√°rio"
    exit 1
fi
