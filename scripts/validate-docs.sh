#!/bin/bash

# HelixPHP v1.0.0 - Validador de Documenta√ß√£o
# Valida a nova estrutura de documenta√ß√£o v1.0.0

echo "üìö Validando estrutura de documenta√ß√£o HelixPHP v1.0.0..."
echo "============================================================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

# Contadores
ERRORS=0
WARNINGS=0
PASSED=0

# Fun√ß√£o para validar arquivo
validate_file() {
    local file="$1"
    local description="$2"
    local min_size="${3:-500}"

    if [ -f "$file" ]; then
        local size=$(stat -c%s "$file" 2>/dev/null || echo "0")
        if [ "$size" -gt "$min_size" ]; then
            print_success "$description ($size bytes)"
            ((PASSED++))
        else
            print_warning "$description tem pouco conte√∫do ($size bytes)"
            ((WARNINGS++))
        fi
    else
        print_error "$description n√£o encontrado: $file"
        ((ERRORS++))
    fi
}

# Fun√ß√£o para validar diret√≥rio
validate_directory() {
    local dir="$1"
    local description="$2"

    if [ -d "$dir" ]; then
        print_success "$description"
        ((PASSED++))
    else
        print_error "$description n√£o encontrado: $dir"
        ((ERRORS++))
    fi
}

print_status "Validando estrutura principal de documenta√ß√£o..."

# Estrutura principal
validate_directory "docs" "Diret√≥rio principal docs/"
validate_directory "docs/releases" "Diret√≥rio de releases"
validate_directory "docs/technical" "Diret√≥rio t√©cnico"
validate_directory "docs/performance" "Diret√≥rio de performance"
validate_directory "docs/implementions" "Diret√≥rio de implementa√ß√µes"
validate_directory "docs/testing" "Diret√≥rio de testes"
validate_directory "docs/contributing" "Diret√≥rio de contribui√ß√£o"

echo ""
print_status "Validando documenta√ß√£o principal..."

# Documenta√ß√£o principal
validate_file "README.md" "README principal" 1000
validate_file "docs/index.md" "√çndice principal da documenta√ß√£o" 1000
validate_file "CHANGELOG.md" "Changelog" 500
validate_file "CONTRIBUTING.md" "Guia de contribui√ß√£o" 1000

echo ""
print_status "Validando documenta√ß√£o de releases..."

# Releases
validate_file "docs/releases/README.md" "√çndice de releases" 1000
validate_file "docs/releases/FRAMEWORK_OVERVIEW_v1.0.0.md" "Overview v1.0.0 (ATUAL)" 10000
validate_file "docs/releases/FRAMEWORK_OVERVIEW_v1.0.0.md" "Overview v1.0.0" 5000
validate_file "docs/releases/FRAMEWORK_OVERVIEW_v1.0.0.md" "Overview v1.0.0" 5000

echo ""
print_status "Validando documenta√ß√£o t√©cnica..."

# Documenta√ß√£o t√©cnica
validate_file "docs/technical/application.md" "Documenta√ß√£o da Application" 5000
validate_file "docs/technical/http/request.md" "Documenta√ß√£o de Request" 5000
validate_file "docs/technical/http/response.md" "Documenta√ß√£o de Response" 5000
validate_file "docs/technical/routing/router.md" "Documenta√ß√£o do Router" 5000
validate_file "docs/technical/middleware/README.md" "√çndice de middlewares" 5000
validate_file "docs/technical/authentication/usage_native.md" "Autentica√ß√£o nativa" 10000

# Verificar documenta√ß√£o OpenAPI
if [ -f "docs/technical/http/openapi_documentation.md" ]; then
    validate_file "docs/technical/http/openapi_documentation.md" "Documenta√ß√£o OpenAPI" 5000
else
    print_warning "Documenta√ß√£o OpenAPI n√£o encontrada (opcional)"
    ((WARNINGS++))
fi

echo ""
print_status "Validando documenta√ß√£o de implementa√ß√µes..."

validate_file "docs/implementions/usage_basic.md" "Guia b√°sico de uso" 5000

echo ""
print_status "Validando documenta√ß√£o de performance..."

validate_file "docs/performance/PerformanceMonitor.md" "Monitor de performance" 5000
validate_file "docs/performance/benchmarks/README.md" "Documenta√ß√£o de benchmarks" 10000

echo ""
print_status "Validando documenta√ß√£o de testes..."

validate_file "docs/testing/api_testing.md" "Testes de API" 5000

echo ""
print_status "Validando documenta√ß√£o de contribui√ß√£o..."

validate_file "docs/contributing/README.md" "Guia de contribui√ß√£o" 5000

echo ""
print_status "Verificando conte√∫do espec√≠fico v1.0.0..."

# Verificar conte√∫do espec√≠fico da v1.0.0
if [ -f "docs/releases/FRAMEWORK_OVERVIEW_v1.0.0.md" ]; then
    content=$(cat "docs/releases/FRAMEWORK_OVERVIEW_v1.0.0.md")

    if echo "$content" | grep -q "2.69M" && echo "$content" | grep -q "PHP 8.4.8" && echo "$content" | grep -q "JIT"; then
        print_success "FRAMEWORK_OVERVIEW_v1.0.0.md cont√©m m√©tricas de performance v1.0.0"
        ((PASSED++))
    else
        print_warning "FRAMEWORK_OVERVIEW_v1.0.0.md pode estar incompleto (faltam m√©tricas v1.0.0)"
        ((WARNINGS++))
    fi
fi

# Verificar se √≠ndice principal est√° atualizado
if [ -f "docs/index.md" ]; then
    content=$(cat "docs/index.md")

    if echo "$content" | grep -q "v1.0.0" && echo "$content" | grep -q "releases/" && echo "$content" | grep -q "technical/"; then
        print_success "√çndice principal atualizado para estrutura v1.0.0"
        ((PASSED++))
    else
        print_warning "√çndice principal pode n√£o estar totalmente atualizado para v1.0.0"
        ((WARNINGS++))
    fi
fi

echo ""
print_status "Verificando migra√ß√£o de arquivos da raiz..."

# Verificar se arquivos antigos foram movidos da raiz
old_files=("FRAMEWORK_OVERVIEW_v1.0.0.md" "FRAMEWORK_OVERVIEW_v1.0.0.md" "FRAMEWORK_OVERVIEW_v1.0.0.md")

for file in "${old_files[@]}"; do
    if [ -f "$file" ]; then
        print_warning "Arquivo deveria ter sido movido para docs/releases/: $file"
        ((WARNINGS++))
    else
        print_success "Arquivo movido corretamente da raiz: $file"
        ((PASSED++))
    fi
done

echo ""
echo "==========================================="
echo "üìä RELAT√ìRIO DE VALIDA√á√ÉO DE DOCUMENTA√á√ÉO"
echo "==========================================="
echo ""

total=$((PASSED + WARNINGS + ERRORS))
if [ $total -gt 0 ]; then
    success_rate=$((PASSED * 100 / total))
else
    success_rate=0
fi

echo "üìà Estat√≠sticas:"
echo "  Total de verifica√ß√µes: $total"
echo "  Sucessos: $PASSED"
echo "  Avisos: $WARNINGS"
echo "  Erros: $ERRORS"
echo "  Taxa de sucesso: $success_rate%"
echo ""

if [ $ERRORS -eq 0 ]; then
    print_success "üéâ VALIDA√á√ÉO DE DOCUMENTA√á√ÉO CONCLU√çDA COM SUCESSO!"
    echo ""
    echo "‚úÖ A documenta√ß√£o HelixPHP v1.0.0 est√°:"
    echo "   ‚Ä¢ Bem estruturada e organizada"
    echo "   ‚Ä¢ Atualizada para a vers√£o v1.0.0"
    echo "   ‚Ä¢ Pronta para uso por desenvolvedores"
    echo "   ‚Ä¢ Compat√≠vel com publica√ß√£o"

    if [ $WARNINGS -gt 0 ]; then
        echo ""
        echo "‚ö†Ô∏è  Considera resolver os $WARNINGS aviso(s) para melhor qualidade"
    fi

    echo ""
    echo "üìñ Estrutura de navega√ß√£o:"
    echo "   ‚Ä¢ In√≠cio: docs/index.md"
    echo "   ‚Ä¢ Releases: docs/releases/"
    echo "   ‚Ä¢ T√©cnico: docs/technical/"
    echo "   ‚Ä¢ Performance: docs/performance/"
    echo "   ‚Ä¢ Implementa√ß√µes: docs/implementions/"
    echo "   ‚Ä¢ Testes: docs/testing/"
    echo "   ‚Ä¢ Contribui√ß√£o: docs/contributing/"

    exit 0
else
    print_error "‚ùå VALIDA√á√ÉO DE DOCUMENTA√á√ÉO FALHOU!"
    echo ""
    echo "üö® Encontrados $ERRORS erro(s) cr√≠tico(s) na documenta√ß√£o."
    echo "   Corrija os problemas antes de publicar o projeto."
    echo ""
    echo "üîß A√ß√µes recomendadas:"
    echo "   ‚Ä¢ Verifique se todos os diret√≥rios existem"
    echo "   ‚Ä¢ Crie arquivos de documenta√ß√£o faltantes"
    echo "   ‚Ä¢ Garanta que arquivos tenham conte√∫do adequado"
    echo "   ‚Ä¢ Execute novamente ap√≥s corre√ß√µes"

    exit 1
fi
