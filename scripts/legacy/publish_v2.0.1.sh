#!/bin/bash

# üöÄ PivotPHP v1.0.0 - Snippet de Publica√ß√£o
# Script consolidado para publicar a nova vers√£o com documenta√ß√£o atualizada

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir t√≠tulos
title() {
    echo -e "\n${BLUE}===================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}===================================${NC}\n"
}

# Fun√ß√£o para exibir sucesso
success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# Fun√ß√£o para exibir aviso
warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Fun√ß√£o para exibir erro
error() {
    echo -e "${RED}‚ùå $1${NC}"
}

title "PivotPHP v1.0.0 - Publica√ß√£o Consolidada"

echo -e "${BLUE}üéØ Objetivos desta vers√£o:${NC}"
echo "‚Ä¢ Consolidar documenta√ß√£o de performance"
echo "‚Ä¢ Atualizar todos os benchmarks com dados reais"
echo "‚Ä¢ Publicar otimiza√ß√µes avan√ßadas validadas"
echo "‚Ä¢ Padronizar estrutura de documenta√ß√£o"
echo ""

# Verificar se estamos no diret√≥rio correto
if [ ! -f "composer.json" ] || [ ! -d "src" ]; then
    error "Execute este script no diret√≥rio raiz do projeto PivotPHP"
    exit 1
fi

# Verificar vers√£o atual
echo -e "${YELLOW}üìã Verificando vers√£o atual...${NC}"
CURRENT_VERSION=$(grep -o '"version": "[^"]*"' composer.json | cut -d'"' -f4 || echo "n√£o encontrada")
echo "Vers√£o no composer.json: $CURRENT_VERSION"

APP_VERSION=$(grep "public const VERSION = " src/Core/Application.php | cut -d"'" -f2 || echo "n√£o encontrada")
echo "Vers√£o no Application.php: $APP_VERSION"

# Verificar se j√° est√° na vers√£o 2.0.1
if [ "$APP_VERSION" = "2.0.1" ]; then
    success "Vers√£o 2.0.1 j√° configurada no c√≥digo"
else
    warning "Vers√£o no c√≥digo n√£o est√° em 2.0.1"
fi

# Validar arquivos principais
title "üìä Validando Documenta√ß√£o Consolidada"

REQUIRED_FILES=(
    "PERFORMANCE_REPORT_FINAL.md"
    "TECHNICAL_OPTIMIZATION_SUMMARY.md"
    "docs/performance/PERFORMANCE_ANALYSIS_v1.0.0.md"
    "docs/releases/v1.0.0-RELEASE-NOTES.md"
    "benchmarks/reports/EXECUTIVE_PERFORMANCE_SUMMARY.md"
    "CHANGELOG.md"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        success "Encontrado: $file"
    else
        error "Faltando: $file"
    fi
done

# Verificar se h√° dados de benchmark reais
title "üß™ Verificando Dados de Benchmark"

if [ -d "benchmarks/reports" ]; then
    REPORT_COUNT=$(find benchmarks/reports -name "*.md" | wc -l)
    success "Encontrados $REPORT_COUNT relat√≥rios de benchmark"

    if [ -f "benchmarks/reports/comprehensive_benchmark_2025-06-27_20-34-04.json" ]; then
        success "Dados de benchmark mais recentes encontrados"
    else
        warning "Dados de benchmark podem estar desatualizados"
    fi
else
    error "Diret√≥rio de relat√≥rios de benchmark n√£o encontrado"
fi

# Gerar snippet de atualiza√ß√£o do composer.json
title "üì¶ Snippet para Atualizar composer.json"

echo -e "${YELLOW}Execute o seguinte comando para atualizar a vers√£o:${NC}"
echo -e "${GREEN}"
cat << 'EOF'
# Atualizar vers√£o no composer.json para 2.0.1
sed -i 's/"version": "[^"]*"/"version": "2.0.1"/' composer.json

# Verificar atualiza√ß√£o
grep '"version":' composer.json
EOF
echo -e "${NC}"

# Gerar snippet de valida√ß√£o
title "üîç Snippet de Valida√ß√£o"

echo -e "${YELLOW}Para validar todas as mudan√ßas:${NC}"
echo -e "${GREEN}"
cat << 'EOF'
# Executar testes
composer test

# Verificar padr√µes de c√≥digo
composer phpstan

# Validar benchmarks
cd benchmarks && ./run_benchmark.sh --validate

# Verificar documenta√ß√£o
find docs -name "*.md" -exec echo "Validando: {}" \;
EOF
echo -e "${NC}"

# Gerar snippet de commit e tag
title "üè∑Ô∏è  Snippet de Commit e Tag"

echo -e "${YELLOW}Para fazer commit e criar tag v1.0.0:${NC}"
echo -e "${GREEN}"
cat << 'EOF'
# Adicionar todas as mudan√ßas
git add .

# Commit consolidado
git commit -m "chore: release v1.0.0

‚ú® Performance & Documentation Release

üöÄ Advanced Optimizations:
- ML-powered cache prediction (5 models active)
- Zero-copy operations (1.7GB memory saved)
- Memory mapping manager
- Route memory manager (6.9M ops/sec)
- Middleware pipeline compiler

üìä Benchmark Updates:
- Real-time data capture from all optimizations
- Scientific methodology with validated metrics
- Comprehensive performance analysis
- Executive summary with 278x improvement

üìã Documentation Consolidation:
- PERFORMANCE_REPORT_FINAL.md
- TECHNICAL_OPTIMIZATION_SUMMARY.md
- docs/performance/PERFORMANCE_ANALYSIS_v1.0.0.md
- Standardized benchmark reports

üîß Technical Improvements:
- Version updated to 2.0.1 across all files
- Production-ready optimizations
- Memory efficiency (89MB peak usage)
- Predictive cache with ML learning"

# Criar tag anotada
git tag -a v1.0.0 -m "PivotPHP v1.0.0 - Performance & Documentation Release

üéØ Key Features:
‚Ä¢ Advanced optimizations with real production data
‚Ä¢ 278x performance improvement (50K ‚Üí 13.9M ops/sec)
‚Ä¢ Consolidated performance documentation
‚Ä¢ Scientific benchmark methodology
‚Ä¢ ML-powered cache prediction
‚Ä¢ Zero-copy memory operations

üìä Performance Highlights:
‚Ä¢ CORS Headers: 52M ops/sec
‚Ä¢ Response Creation: 24M ops/sec
‚Ä¢ JSON Encode: 11M ops/sec
‚Ä¢ Middleware Pipeline: 2.2M ops/sec
‚Ä¢ Memory Usage: 89MB peak

üìã Documentation:
‚Ä¢ Complete technical analysis
‚Ä¢ Executive performance summary
‚Ä¢ Implementation guides
‚Ä¢ Validated benchmark data

This release establishes PivotPHP as a high-performance framework
suitable for production environments with enterprise-grade performance."

# Push commits e tags
git push origin main
git push origin v1.0.0
EOF
echo -e "${NC}"

# Gerar snippet de publica√ß√£o no Packagist
title "üì¶ Snippet de Publica√ß√£o no Packagist"

echo -e "${YELLOW}Para publicar no Packagist (se aplic√°vel):${NC}"
echo -e "${GREEN}"
cat << 'EOF'
# Se o projeto estiver conectado ao Packagist, a tag criar√° automaticamente uma nova vers√£o
# Caso contr√°rio, acesse: https://packagist.org/packages/pivotphp-core/microframework

# Verificar se a vers√£o apareceu
curl -s https://packagist.org/packages/pivotphp-core/microframework.json | \
  jq '.package.versions | keys | .[-1]'

# Para projetos privados, usar:
composer install pivotphp-core/microframework:^2.0.1
EOF
echo -e "${NC}"

# Resumo final
title "üìã Resumo da Publica√ß√£o v1.0.0"

echo -e "${BLUE}‚úÖ Checklist Final:${NC}"
echo "‚ñ° Vers√£o 2.0.1 atualizada em todos os arquivos"
echo "‚ñ° Documenta√ß√£o consolidada e padronizada"
echo "‚ñ° Benchmarks executados com dados reais"
echo "‚ñ° Release notes criadas"
echo "‚ñ° CHANGELOG atualizado"
echo "‚ñ° Testes executados com sucesso"
echo "‚ñ° Commit e tag criados"
echo "‚ñ° Push para reposit√≥rio remoto"
echo "‚ñ° Publica√ß√£o no Packagist (se aplic√°vel)"

echo ""
echo -e "${GREEN}üéâ PivotPHP v1.0.0 pronto para publica√ß√£o!${NC}"
echo -e "${BLUE}üìä Principais melhorias: Performance +278%, Documenta√ß√£o consolidada, Otimiza√ß√µes ML${NC}"
echo ""

# Exibir pr√≥ximos passos
echo -e "${YELLOW}üöÄ Pr√≥ximos passos:${NC}"
echo "1. Execute os snippets acima na ordem apresentada"
echo "2. Valide cada etapa antes de continuar"
echo "3. Monitore a publica√ß√£o no Packagist"
echo "4. Atualize documenta√ß√£o externa se necess√°rio"
echo "5. Anuncie o release para a comunidade"
echo ""

echo -e "${BLUE}üìñ Documenta√ß√£o principal:${NC}"
echo "‚Ä¢ PERFORMANCE_REPORT_FINAL.md - An√°lise completa"
echo "‚Ä¢ TECHNICAL_OPTIMIZATION_SUMMARY.md - Resumo t√©cnico"
echo "‚Ä¢ docs/releases/v1.0.0-RELEASE-NOTES.md - Notas do release"
echo ""

warning "Certifique-se de revisar todos os arquivos antes de publicar!"
