#!/bin/bash

# HelixPHP - Instalador de Git Hooks
# Configura as valida√ß√µes de qualidade de c√≥digo para pre-commit e pre-push

set -e

echo "üõ†Ô∏è  Configurando Git hooks para HelixPHP..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

# Verifica se estamos em um reposit√≥rio git
if [ ! -d ".git" ]; then
    print_error "Este n√£o √© um reposit√≥rio Git!"
    exit 1
fi

# Verifica se as depend√™ncias est√£o instaladas
if [ ! -d "vendor" ]; then
    print_warning "Depend√™ncias n√£o encontradas. Instalando..."
    composer install
fi

# M√©todo 1: Usando pre-commit framework (recomendado)
if command -v pre-commit >/dev/null 2>&1; then
    print_status "Framework pre-commit detectado. Configurando..."

    if [ -f ".pre-commit-config.yaml" ]; then
        pre-commit install
        print_success "Pre-commit hooks instalados via framework!"

        print_status "Testando hooks..."
        if pre-commit run --all-files; then
            print_success "Todos os hooks est√£o funcionando!"
        else
            print_warning "Alguns hooks falharam. Verifique os arquivos."
        fi
    else
        print_error "Arquivo .pre-commit-config.yaml n√£o encontrado!"
        exit 1
    fi

# M√©todo 2: Hook manual do Git
else
    print_status "Framework pre-commit n√£o encontrado. Usando hooks manuais do Git..."

    # Cria diret√≥rio de hooks se n√£o existir
    mkdir -p .git/hooks

    # Instala pre-commit hook
    if [ -f "scripts/pre-commit" ]; then
        cp scripts/pre-commit .git/hooks/pre-commit
        chmod +x .git/hooks/pre-commit
        print_success "Pre-commit hook instalado em .git/hooks/pre-commit"
    else
        print_error "Script pre-commit n√£o encontrado em scripts/pre-commit!"
        exit 1
    fi

    # Instala pre-push hook
    if [ -f "scripts/pre-push" ]; then
        cp scripts/pre-push .git/hooks/pre-push
        chmod +x .git/hooks/pre-push
        print_success "Pre-push hook instalado em .git/hooks/pre-push"
    else
        print_warning "Script pre-push n√£o encontrado em scripts/pre-push"
    fi

    # Testa os hooks
    print_status "Testando pre-commit hook..."
    if .git/hooks/pre-commit; then
        print_success "Pre-commit hook est√° funcionando!"
    else
        print_warning "Pre-commit hook falhou. Verifique os erros acima."
    fi

    if [ -f ".git/hooks/pre-push" ]; then
        print_status "Pre-push hook instalado e pronto para uso"
        print_warning "Pre-push ser√° testado no pr√≥ximo push para o reposit√≥rio remoto"
    fi
fi

echo ""
print_success "Configura√ß√£o conclu√≠da! üéâ"
echo ""
echo "Git Hooks configurados:"
echo "  ‚úì Pre-commit: Valida√ß√µes r√°pidas antes do commit"
echo "  ‚úì Pre-push: Valida√ß√£o completa antes do push"
echo ""
echo "Valida√ß√µes inclu√≠das:"
echo "  ‚úì PHPStan (an√°lise est√°tica)"
echo "  ‚úì PHPUnit (testes unit√°rios)"
echo "  ‚úì PSR-12 (padr√£o de c√≥digo)"
echo "  ‚úì Sintaxe PHP"
echo "  ‚úì Verifica√ß√µes de estrutura"
echo "  ‚úì Documenta√ß√£o (no pre-push)"
echo "  ‚úì Benchmarks (no pre-push)"
echo ""
echo "Os hooks ser√£o executados automaticamente:"
echo "‚Ä¢ Pre-commit: Antes de cada commit"
echo "‚Ä¢ Pre-push: Antes de cada push para o reposit√≥rio remoto"
echo ""

# Instru√ß√µes adicionais
if ! command -v pre-commit >/dev/null 2>&1; then
    print_warning "Para melhor experi√™ncia, instale o framework pre-commit:"
    echo "  pip install pre-commit"
    echo "  Depois execute: pre-commit install"
    echo ""
fi

print_status "Para testar manualmente:"
echo "  ./scripts/pre-commit     # Testa valida√ß√µes de commit"
echo "  ./scripts/pre-push       # Testa valida√ß√£o completa"
echo "  scripts/validate_all.sh  # Executa todos os testes"
echo ""
print_status "Para pular as valida√ß√µes temporariamente:"
echo "  git commit --no-verify   # Pula pre-commit"
echo "  git push --no-verify     # Pula pre-push"
